{"mappings":"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","sources":["js/index.js"],"sourcesContent":["const X = 'x';\nconst CIRCLE = 'circle';\nconst MODE_HUMAN = 'human';\nconst MODE_COMPUTER = 'computer';\n\nconst WINNING_COMBS = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst gameState = {\n  isFinished: false,\n  turn: X,\n  movesCount: 0,\n  results: [],\n  board: [...new Array(9)],\n  mode: {\n    name: MODE_COMPUTER,\n    computerMark: CIRCLE,\n  },\n};\n\nconst boardElem = document.querySelector('.board');\nconst cells = [...boardElem.querySelectorAll('[data-cell]')];\nconst endMessage = document.querySelector('.end-message');\nconst endMessageText = endMessage.querySelector('.end-message__text');\nconst endMessageMovesTotal = endMessage.querySelector('.end-message__moves-total');\nconst restartBtns = document.querySelectorAll('.restart-btn');\nconst scoreboard = document.querySelector('.scoreboard');\nconst scoreboardXWins = scoreboard.querySelector('.x-wins-count');\nconst scoreboardOWins = scoreboard.querySelector('.o-wins-count');\nconst scoreboardDraws = scoreboard.querySelector('.draws-count');\nconst currentTurnIcon = document.querySelector('.current-turn__turn-icon');\nconst settingsBtn = document.querySelector('.settings-btn');\nconst settingsModal = document.querySelector('.settings-modal');\nconst modeCheckbox = settingsModal.querySelector('.mode-switch__checkbox');\nconst markRadioBtns = [...document.querySelectorAll('.mark-toggle__input')];\nconst markXRadio = markRadioBtns.find((btn) => btn.dataset.mark === X);\nconst markORadio = markRadioBtns.find((btn) => btn.dataset.mark === CIRCLE);\n\nconst setLocalStorage = () => {\n  const { results } = gameState;\n  localStorage.setItem('results', JSON.stringify(results.slice(-10)));\n};\n\nconst getLocalStorage = () => {\n  const results = localStorage.getItem('results');\n  gameState.results = results ? JSON.parse(results) : [];\n};\n\nconst setInitSettings = () => {\n  const isModeComputer = gameState.mode.name === MODE_COMPUTER;\n  const isUserMarkX = gameState.mode.computerMark === CIRCLE;\n\n  modeCheckbox.checked = isModeComputer;\n  markXRadio.checked = isUserMarkX;\n  markORadio.checked = !isUserMarkX;\n\n  /* eslint-disable no-param-reassign */\n  markRadioBtns.forEach((btn) => {\n    btn.disabled = gameState.mode.name === MODE_HUMAN;\n  });\n  /* eslint-enable no-param-reassign */\n};\n\nconst updateScoreboard = () => {\n  const { results } = gameState;\n  const xWinsCount = results.filter((res) => res === X).length;\n  const oWinsCount = results.filter((res) => res === CIRCLE).length;\n  const drawsCount = results.filter((res) => res === 'draw').length;\n  scoreboardXWins.textContent = xWinsCount;\n  scoreboardOWins.textContent = oWinsCount;\n  scoreboardDraws.textContent = drawsCount;\n};\n\nconst showEndMessage = (isDraw) => {\n  endMessage.classList.add('modal--active');\n  const { movesCount } = gameState;\n\n  endMessageText.classList.remove(X, CIRCLE);\n  endMessageMovesTotal.textContent = `Game was finished in ${movesCount} step${\n    movesCount < 2 ? '' : 's'\n  }`;\n\n  if (isDraw) {\n    endMessageText.textContent = 'Draw!';\n    return;\n  }\n\n  endMessageText.classList.add(gameState.turn);\n  endMessageText.innerHTML = `wins!`;\n};\n\nconst closeModal = (e) => {\n  const modalElem = e.target.closest('.modal');\n\n  if (e.target.classList.contains('modal__close-btn')) {\n    modalElem.classList.remove('modal--active');\n    return;\n  }\n\n  if (!e.target.closest('.modal__inner')) {\n    modalElem.classList.remove('modal--active');\n  }\n};\n\nconst showSettingsModal = () => {\n  settingsModal.classList.add('modal--active');\n};\n\nconst updateTurn = () => {\n  currentTurnIcon.classList.remove(X, CIRCLE);\n  currentTurnIcon.classList.add(gameState.turn);\n};\n\nconst switchTurns = () => {\n  gameState.turn = gameState.turn === X ? CIRCLE : X;\n\n  boardElem.classList.remove(X, CIRCLE);\n  boardElem.classList.add(gameState.turn);\n\n  updateTurn();\n};\n\nconst checkWin = (board, player) =>\n  WINNING_COMBS.some((comb) => comb.every((index) => board[index] === player));\n\nconst getEmptyCellsIndexes = (board) =>\n  board.map((_el, index) => index).filter((index) => !board[index]);\n\nconst checkDraw = (board) => getEmptyCellsIndexes(board).length === 0;\n\nconst countResult = (currentResult) => {\n  gameState.results = [...gameState.results, currentResult].slice(-10);\n};\n\nconst minimax = (board, isMaximizer) => {\n  const boardCopy = board.slice();\n  const player = isMaximizer ? X : CIRCLE;\n\n  if (checkWin(boardCopy, X)) {\n    return { score: 10 };\n  }\n  if (checkWin(boardCopy, CIRCLE)) {\n    return { score: -10 };\n  }\n  if (checkDraw(boardCopy)) {\n    return { score: 0 };\n  }\n\n  const availableSpots = getEmptyCellsIndexes(boardCopy);\n  const moves = [];\n\n  availableSpots.forEach((index) => {\n    const move = { index };\n    boardCopy[index] = player;\n    const { score } = minimax(boardCopy, !isMaximizer);\n    move.score = score;\n    boardCopy[index] = null;\n    moves.push(move);\n  });\n\n  let bestMove = { index: -1 };\n\n  if (isMaximizer) {\n    let bestScore = -1000;\n    moves.forEach((move) => {\n      if (move.score > bestScore) {\n        bestScore = move.score;\n        bestMove = move;\n      }\n    });\n  } else {\n    let bestScore = 1000;\n    moves.forEach((move) => {\n      if (move.score < bestScore) {\n        bestScore = move.score;\n        bestMove = move;\n      }\n    });\n  }\n\n  return bestMove;\n};\n\nconst findBestMove = (board, player) => {\n  const bestMove = minimax(board, player === X);\n  return bestMove.index;\n};\n\nconst checkGameOver = () => checkWin(gameState.board, gameState.turn) || checkDraw(gameState.board);\n\nconst finishGame = () => {\n  gameState.isFinished = true;\n\n  if (checkWin(gameState.board, gameState.turn)) {\n    countResult(gameState.turn);\n    updateScoreboard();\n    showEndMessage(false);\n    return;\n  }\n  if (checkDraw(gameState.board)) {\n    countResult('draw');\n    updateScoreboard();\n    showEndMessage(true);\n  }\n};\n\nconst makeMove = (player, index) => {\n  gameState.board[index] = player;\n  cells[index].classList.add(gameState.turn);\n\n  gameState.movesCount += 1;\n\n  const isGameOver = checkGameOver();\n\n  return isGameOver;\n};\n\nconst makeBestMove = () => {\n  const bestMoveIndex = findBestMove(gameState.board, gameState.turn);\n  const isGameOver = makeMove(gameState.turn, bestMoveIndex);\n\n  return isGameOver;\n};\n\nconst handleCellClick = (e) => {\n  if (gameState.isFinished) return;\n\n  const cell = e.target;\n  const cellIndex = cells.indexOf(cell);\n  switch (gameState.mode.name) {\n    case MODE_HUMAN: {\n      const isGameOver = makeMove(gameState.turn, cellIndex);\n\n      if (isGameOver) {\n        finishGame();\n        return;\n      }\n      switchTurns();\n      return;\n    }\n    case MODE_COMPUTER: {\n      let isGameOver = makeMove(gameState.turn, cellIndex);\n      if (isGameOver) {\n        finishGame();\n        return;\n      }\n      switchTurns();\n\n      const bestMoveIndex = findBestMove(gameState.board, gameState.turn);\n      cells[bestMoveIndex].removeEventListener('click', handleCellClick);\n\n      isGameOver = makeMove(gameState.turn, bestMoveIndex);\n\n      if (isGameOver) {\n        finishGame();\n        return;\n      }\n      switchTurns();\n      return;\n    }\n    default:\n      throw new Error(`Unknown mode name: ${gameState.mode.name}`);\n  }\n};\n\nconst startGame = () => {\n  gameState.isFinished = false;\n  gameState.board = [...new Array(9)];\n  gameState.movesCount = 0;\n  gameState.turn = X;\n\n  updateTurn();\n\n  boardElem.classList.remove(X, CIRCLE);\n  boardElem.classList.add(X);\n\n  if (gameState.mode.name === MODE_COMPUTER && gameState.mode.computerMark === X) {\n    makeBestMove();\n    switchTurns();\n  }\n\n  getEmptyCellsIndexes(gameState.board).forEach((index) =>\n    cells[index].addEventListener('click', handleCellClick, { once: true })\n  );\n};\n\nconst restartGame = () => {\n  cells.forEach((cell) => cell.classList.remove(X, CIRCLE));\n  startGame();\n};\n\nconst handleRestart = () => {\n  endMessage.classList.remove('modal--active');\n  restartGame();\n};\n\nconst handleModeChange = (e) => {\n  const checkbox = e.target;\n  gameState.mode.name = checkbox.checked ? MODE_COMPUTER : MODE_HUMAN;\n  /* eslint-disable no-param-reassign */\n  markRadioBtns.forEach((btn) => {\n    btn.disabled = gameState.mode.name === MODE_HUMAN;\n  });\n  /* eslint-enable no-param-reassign */\n  restartGame();\n};\n\nconst handleMarkChange = (e) => {\n  const markRadioBtn = e.target;\n  if (markRadioBtn.checked) {\n    const isUserMarkX = markRadioBtn.dataset.xMark;\n    gameState.mode.computerMark = isUserMarkX ? CIRCLE : X;\n    restartGame();\n  }\n};\n\nwindow.addEventListener('load', () => {\n  getLocalStorage();\n  updateScoreboard();\n  setInitSettings();\n\n  window.addEventListener('beforeunload', setLocalStorage);\n  restartBtns.forEach((btn) => btn.addEventListener('click', handleRestart));\n  settingsBtn.addEventListener('click', showSettingsModal);\n  settingsModal.addEventListener('click', closeModal);\n  endMessage.addEventListener('click', closeModal);\n  modeCheckbox.addEventListener('input', handleModeChange);\n  markRadioBtns.forEach((radioBtn) => radioBtn.addEventListener('input', handleMarkChange));\n\n  startGame();\n});\n"],"names":["X","CIRCLE","MODE_HUMAN","MODE_COMPUTER","WINNING_COMBS","gameState","isFinished","turn","movesCount","results","board","Array","mode","name","computerMark","boardElem","document","querySelector","cells","querySelectorAll","endMessage","endMessageText","endMessageMovesTotal","restartBtns","scoreboard","scoreboardXWins","scoreboardOWins","scoreboardDraws","currentTurnIcon","settingsBtn","settingsModal","modeCheckbox","markRadioBtns","markXRadio","find","btn","dataset","mark","markORadio","setLocalStorage","localStorage","setItem","JSON","stringify","slice","getLocalStorage","getItem","parse","setInitSettings","isModeComputer","isUserMarkX","checked","forEach","disabled","updateScoreboard","xWinsCount","filter","res","length","oWinsCount","drawsCount","textContent","showEndMessage","isDraw","classList","add","remove","innerHTML","closeModal","e","modalElem","target","closest","contains","showSettingsModal","updateTurn","switchTurns","checkWin","player","some","comb","every","index","getEmptyCellsIndexes","map","_el","checkDraw","countResult","currentResult","minimax","isMaximizer","boardCopy","score","availableSpots","moves","move","push","bestMove","bestScore","bestScore1","findBestMove","checkGameOver","finishGame","makeMove","makeBestMove","bestMoveIndex","handleCellClick","cell","cellIndex","indexOf","isGameOver1","removeEventListener","Error","startGame","addEventListener","once","restartGame","handleRestart","handleModeChange","checkbox","handleMarkChange","markRadioBtn","xMark","window","radioBtn"],"version":3,"file":"index.33b1216d.js.map"}