const X="x",CIRCLE="circle",MODE_HUMAN="human",MODE_COMPUTER="computer",WINNING_COMBS=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]],gameState={isFinished:!1,turn:X,movesCount:0,results:[],board:[...new Array(9)],mode:{name:"computer",computerMark:CIRCLE}},boardElem=document.querySelector(".board"),cells=[...boardElem.querySelectorAll("[data-cell]")],endMessage=document.querySelector(".end-message"),endMessageText=endMessage.querySelector(".end-message__text"),endMessageMovesTotal=endMessage.querySelector(".end-message__moves-total"),restartBtns=document.querySelectorAll(".restart-btn"),scoreboard=document.querySelector(".scoreboard"),scoreboardXWins=scoreboard.querySelector(".x-wins-count"),scoreboardOWins=scoreboard.querySelector(".o-wins-count"),scoreboardDraws=scoreboard.querySelector(".draws-count"),currentTurnIcon=document.querySelector(".current-turn__turn-icon"),settingsBtn=document.querySelector(".settings-btn"),settingsModal=document.querySelector(".settings-modal"),modeCheckbox=settingsModal.querySelector(".mode-switch__checkbox"),markRadioBtns=[...document.querySelectorAll(".mark-toggle__input")],markXRadio=markRadioBtns.find((e=>e.dataset.mark===X)),markORadio=markRadioBtns.find((e=>e.dataset.mark===CIRCLE)),setLocalStorage=()=>{const{results:e}=gameState;localStorage.setItem("results",JSON.stringify(e.slice(-10)))},getLocalStorage=()=>{const e=localStorage.getItem("results");gameState.results=e?JSON.parse(e):[]},setInitSettings=()=>{const e="computer"===gameState.mode.name,t=gameState.mode.computerMark===CIRCLE;modeCheckbox.checked=e,markXRadio.checked=t,markORadio.checked=!t,markRadioBtns.forEach((e=>{e.disabled="human"===gameState.mode.name}))},updateScoreboard=()=>{const{results:e}=gameState,t=e.filter((e=>e===X)).length,a=e.filter((e=>e===CIRCLE)).length,s=e.filter((e=>"draw"===e)).length;scoreboardXWins.textContent=t,scoreboardOWins.textContent=a,scoreboardDraws.textContent=s},showEndMessage=e=>{endMessage.classList.add("modal--active");const{movesCount:t}=gameState;endMessageText.classList.remove(X,CIRCLE),endMessageMovesTotal.textContent=`Game was finished in ${t} step${t<2?"":"s"}`,e?endMessageText.textContent="Draw!":(endMessageText.classList.add(gameState.turn),endMessageText.innerHTML="wins!")},closeModal=e=>{const t=e.target.closest(".modal");e.target.classList.contains("modal__close-btn")?t.classList.remove("modal--active"):e.target.closest(".modal__inner")||t.classList.remove("modal--active")},showSettingsModal=()=>{settingsModal.classList.add("modal--active")},updateTurn=()=>{currentTurnIcon.classList.remove(X,CIRCLE),currentTurnIcon.classList.add(gameState.turn)},switchTurns=()=>{gameState.turn=gameState.turn===X?CIRCLE:X,boardElem.classList.remove(X,CIRCLE),boardElem.classList.add(gameState.turn),updateTurn()},checkWin=(e,t)=>WINNING_COMBS.some((a=>a.every((a=>e[a]===t)))),getEmptyCellsIndexes=e=>e.map(((e,t)=>t)).filter((t=>!e[t])),checkDraw=e=>0===getEmptyCellsIndexes(e).length,countResult=e=>{gameState.results=[...gameState.results,e].slice(-10)},minimax=(e,t)=>{const a=e.slice(),s=t?X:CIRCLE;if(checkWin(a,X))return{score:10};if(checkWin(a,CIRCLE))return{score:-10};if(checkDraw(a))return{score:0};const r=getEmptyCellsIndexes(a),o=[];r.forEach((e=>{const r={index:e};a[e]=s;const{score:n}=minimax(a,!t);r.score=n,a[e]=null,o.push(r)}));let n={index:-1};if(t){let e=-1e3;o.forEach((t=>{t.score>e&&(e=t.score,n=t)}))}else{let e=1e3;o.forEach((t=>{t.score<e&&(e=t.score,n=t)}))}return n},findBestMove=(e,t)=>minimax(e,t===X).index,checkGameOver=()=>checkWin(gameState.board,gameState.turn)||checkDraw(gameState.board),finishGame=()=>{if(gameState.isFinished=!0,checkWin(gameState.board,gameState.turn))return countResult(gameState.turn),updateScoreboard(),void showEndMessage(!1);checkDraw(gameState.board)&&(countResult("draw"),updateScoreboard(),showEndMessage(!0))},makeMove=(e,t)=>{gameState.board[t]=e,cells[t].classList.add(gameState.turn),gameState.movesCount+=1;return checkWin(gameState.board,gameState.turn)||checkDraw(gameState.board)},makeBestMove=()=>{const e=findBestMove(gameState.board,gameState.turn);return makeMove(gameState.turn,e)},handleCellClick=e=>{if(gameState.isFinished)return;const t=e.target,a=cells.indexOf(t);switch(gameState.mode.name){case"human":return makeMove(gameState.turn,a)?void finishGame():void switchTurns();case"computer":{let e=makeMove(gameState.turn,a);if(e)return void finishGame();switchTurns();const t=findBestMove(gameState.board,gameState.turn);return cells[t].removeEventListener("click",handleCellClick),e=makeMove(gameState.turn,t),e?void finishGame():void switchTurns()}default:throw new Error(`Unknown mode name: ${gameState.mode.name}`)}},startGame=()=>{gameState.isFinished=!1,gameState.board=[...new Array(9)],gameState.movesCount=0,gameState.turn=X,updateTurn(),boardElem.classList.remove(X,CIRCLE),boardElem.classList.add(X),"computer"===gameState.mode.name&&gameState.mode.computerMark===X&&(makeBestMove(),switchTurns()),getEmptyCellsIndexes(gameState.board).forEach((e=>cells[e].addEventListener("click",handleCellClick,{once:!0})))},restartGame=()=>{cells.forEach((e=>e.classList.remove(X,CIRCLE))),startGame()},handleRestart=()=>{endMessage.classList.remove("modal--active"),restartGame()},handleModeChange=e=>{const t=e.target;gameState.mode.name=t.checked?"computer":"human",markRadioBtns.forEach((e=>{e.disabled="human"===gameState.mode.name})),restartGame()},handleMarkChange=e=>{const t=e.target;if(t.checked){const e=t.dataset.xMark;gameState.mode.computerMark=e?CIRCLE:X,restartGame()}};window.addEventListener("load",(()=>{getLocalStorage(),updateScoreboard(),setInitSettings(),window.addEventListener("beforeunload",setLocalStorage),restartBtns.forEach((e=>e.addEventListener("click",handleRestart))),settingsBtn.addEventListener("click",showSettingsModal),settingsModal.addEventListener("click",closeModal),endMessage.addEventListener("click",closeModal),modeCheckbox.addEventListener("input",handleModeChange),markRadioBtns.forEach((e=>e.addEventListener("input",handleMarkChange))),startGame()}));
//# sourceMappingURL=index.33b1216d.js.map
